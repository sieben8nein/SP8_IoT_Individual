/*
 * generated by Xtext 2.25.0
 */
package dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GreenhouseGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cHardwareSetupAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHardwareSetupHardwareSetupParserRuleCall_2_0 = (RuleCall)cHardwareSetupAssignment_2.eContents().get(0);
		private final Assignment cGreenhousesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGreenhousesGreenhouseParserRuleCall_3_0 = (RuleCall)cGreenhousesAssignment_3.eContents().get(0);
		
		//Model:
		//    "system" name=ID
		//    hardwareSetup+=HardwareSetup?
		//    greenhouses+=Greenhouse*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"system" name=ID
		//hardwareSetup+=HardwareSetup?
		//greenhouses+=Greenhouse*
		public Group getGroup() { return cGroup; }
		
		//"system"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//hardwareSetup+=HardwareSetup?
		public Assignment getHardwareSetupAssignment_2() { return cHardwareSetupAssignment_2; }
		
		//HardwareSetup
		public RuleCall getHardwareSetupHardwareSetupParserRuleCall_2_0() { return cHardwareSetupHardwareSetupParserRuleCall_2_0; }
		
		//greenhouses+=Greenhouse*
		public Assignment getGreenhousesAssignment_3() { return cGreenhousesAssignment_3; }
		
		//Greenhouse
		public RuleCall getGreenhousesGreenhouseParserRuleCall_3_0() { return cGreenhousesGreenhouseParserRuleCall_3_0; }
	}
	public class HardwareSetupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.HardwareSetup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHardwareSetupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHardwareKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHardwareAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHardwareHardwareParserRuleCall_3_0 = (RuleCall)cHardwareAssignment_3.eContents().get(0);
		private final Keyword cMicroControllersKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cControllersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cControllersControllerParserRuleCall_5_0 = (RuleCall)cControllersAssignment_5.eContents().get(0);
		
		//HardwareSetup:
		//    {HardwareSetup} 'hardware' 'types'
		//    hardware+=Hardware*
		//    'micro-controllers'
		//    controllers+=Controller+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{HardwareSetup} 'hardware' 'types'
		//hardware+=Hardware*
		//'micro-controllers'
		//controllers+=Controller+
		public Group getGroup() { return cGroup; }
		
		//{HardwareSetup}
		public Action getHardwareSetupAction_0() { return cHardwareSetupAction_0; }
		
		//'hardware'
		public Keyword getHardwareKeyword_1() { return cHardwareKeyword_1; }
		
		//'types'
		public Keyword getTypesKeyword_2() { return cTypesKeyword_2; }
		
		//hardware+=Hardware*
		public Assignment getHardwareAssignment_3() { return cHardwareAssignment_3; }
		
		//Hardware
		public RuleCall getHardwareHardwareParserRuleCall_3_0() { return cHardwareHardwareParserRuleCall_3_0; }
		
		//'micro-controllers'
		public Keyword getMicroControllersKeyword_4() { return cMicroControllersKeyword_4; }
		
		//controllers+=Controller+
		public Assignment getControllersAssignment_5() { return cControllersAssignment_5; }
		
		//Controller
		public RuleCall getControllersControllerParserRuleCall_5_0() { return cControllersControllerParserRuleCall_5_0; }
	}
	public class HardwareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Hardware");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSettingActuatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSettingSensorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Hardware:
		//    SettingActuator | SettingSensor
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SettingActuator | SettingSensor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SettingActuator
		public RuleCall getSettingActuatorParserRuleCall_0() { return cSettingActuatorParserRuleCall_0; }
		
		//SettingSensor
		public RuleCall getSettingSensorParserRuleCall_1() { return cSettingSensorParserRuleCall_1; }
	}
	public class SettingActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.SettingActuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActuatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHasKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cActionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSettingActionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSettingActionSettingActionParserRuleCall_4_0 = (RuleCall)cSettingActionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSettingActionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSettingActionSettingActionParserRuleCall_5_1_0 = (RuleCall)cSettingActionAssignment_5_1.eContents().get(0);
		
		//SettingActuator:
		//    'actuator' name=ID 'has' 'action' settingAction+=SettingAction (',' settingAction+=SettingAction)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'actuator' name=ID 'has' 'action' settingAction+=SettingAction (',' settingAction+=SettingAction)*
		public Group getGroup() { return cGroup; }
		
		//'actuator'
		public Keyword getActuatorKeyword_0() { return cActuatorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'has'
		public Keyword getHasKeyword_2() { return cHasKeyword_2; }
		
		//'action'
		public Keyword getActionKeyword_3() { return cActionKeyword_3; }
		
		//settingAction+=SettingAction
		public Assignment getSettingActionAssignment_4() { return cSettingActionAssignment_4; }
		
		//SettingAction
		public RuleCall getSettingActionSettingActionParserRuleCall_4_0() { return cSettingActionSettingActionParserRuleCall_4_0; }
		
		//(',' settingAction+=SettingAction)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//settingAction+=SettingAction
		public Assignment getSettingActionAssignment_5_1() { return cSettingActionAssignment_5_1; }
		
		//SettingAction
		public RuleCall getSettingActionSettingActionParserRuleCall_5_1_0() { return cSettingActionSettingActionParserRuleCall_5_1_0; }
	}
	public class SettingSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.SettingSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cPublishesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReducerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReducerReducerParserRuleCall_3_0 = (RuleCall)cReducerAssignment_3.eContents().get(0);
		private final Assignment cFrequencyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFrequencyFrequencyParserRuleCall_4_0 = (RuleCall)cFrequencyAssignment_4.eContents().get(0);
		
		//SettingSensor:
		//    'sensor' name=ID 'publishes' reducer=Reducer? frequency=Frequency
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'sensor' name=ID 'publishes' reducer=Reducer? frequency=Frequency
		public Group getGroup() { return cGroup; }
		
		//'sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'publishes'
		public Keyword getPublishesKeyword_2() { return cPublishesKeyword_2; }
		
		//reducer=Reducer?
		public Assignment getReducerAssignment_3() { return cReducerAssignment_3; }
		
		//Reducer
		public RuleCall getReducerReducerParserRuleCall_3_0() { return cReducerReducerParserRuleCall_3_0; }
		
		//frequency=Frequency
		public Assignment getFrequencyAssignment_4() { return cFrequencyAssignment_4; }
		
		//Frequency
		public RuleCall getFrequencyFrequencyParserRuleCall_4_0() { return cFrequencyFrequencyParserRuleCall_4_0; }
	}
	public class ControllerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Controller");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControllerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeControllerTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cAndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cHeartBeatAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHeartBeatHeartbeatParserRuleCall_6_0 = (RuleCall)cHeartBeatAssignment_6.eContents().get(0);
		
		//Controller:
		//    'controller' name=ID 'of' 'type' type=ControllerType 'and' heartBeat=Heartbeat
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'controller' name=ID 'of' 'type' type=ControllerType 'and' heartBeat=Heartbeat
		public Group getGroup() { return cGroup; }
		
		//'controller'
		public Keyword getControllerKeyword_0() { return cControllerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type=ControllerType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//ControllerType
		public RuleCall getTypeControllerTypeParserRuleCall_4_0() { return cTypeControllerTypeParserRuleCall_4_0; }
		
		//'and'
		public Keyword getAndKeyword_5() { return cAndKeyword_5; }
		
		//heartBeat=Heartbeat
		public Assignment getHeartBeatAssignment_6() { return cHeartBeatAssignment_6; }
		
		//Heartbeat
		public RuleCall getHeartBeatHeartbeatParserRuleCall_6_0() { return cHeartBeatHeartbeatParserRuleCall_6_0; }
	}
	public class HeartbeatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Heartbeat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHeartbeatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFreqAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFreqFrequencyParserRuleCall_2_0 = (RuleCall)cFreqAssignment_2.eContents().get(0);
		
		//Heartbeat:
		//    'sends' 'heartbeat' freq=Frequency
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'sends' 'heartbeat' freq=Frequency
		public Group getGroup() { return cGroup; }
		
		//'sends'
		public Keyword getSendsKeyword_0() { return cSendsKeyword_0; }
		
		//'heartbeat'
		public Keyword getHeartbeatKeyword_1() { return cHeartbeatKeyword_1; }
		
		//freq=Frequency
		public Assignment getFreqAssignment_2() { return cFreqAssignment_2; }
		
		//Frequency
		public RuleCall getFreqFrequencyParserRuleCall_2_0() { return cFreqFrequencyParserRuleCall_2_0; }
	}
	public class ControllerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.ControllerType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameESP32Keyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameESP8266Keyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		
		//ControllerType:
		//    name=('ESP32' | 'ESP8266')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=('ESP32' | 'ESP8266')
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//('ESP32' | 'ESP8266')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//'ESP32'
		public Keyword getNameESP32Keyword_0_0() { return cNameESP32Keyword_0_0; }
		
		//'ESP8266'
		public Keyword getNameESP8266Keyword_0_1() { return cNameESP8266Keyword_0_1; }
	}
	public class ReducerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Reducer");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameAverageKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameMedianKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		
		//Reducer:
		//    name=('average' | 'median')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=('average' | 'median')
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//('average' | 'median')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//'average'
		public Keyword getNameAverageKeyword_0_0() { return cNameAverageKeyword_0_0; }
		
		//'median'
		public Keyword getNameMedianKeyword_0_1() { return cNameMedianKeyword_0_1; }
	}
	public class FrequencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Frequency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFreqAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFreqExpParserRuleCall_0_0 = (RuleCall)cFreqAssignment_0.eContents().get(0);
		private final Keyword cTimesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUnitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cUnitAlternatives_3_0 = (Alternatives)cUnitAssignment_3.eContents().get(0);
		private final Keyword cUnitSecondKeyword_3_0_0 = (Keyword)cUnitAlternatives_3_0.eContents().get(0);
		private final Keyword cUnitMinuteKeyword_3_0_1 = (Keyword)cUnitAlternatives_3_0.eContents().get(1);
		private final Keyword cUnitHourKeyword_3_0_2 = (Keyword)cUnitAlternatives_3_0.eContents().get(2);
		private final Keyword cUnitDayKeyword_3_0_3 = (Keyword)cUnitAlternatives_3_0.eContents().get(3);
		private final Keyword cUnitWeekKeyword_3_0_4 = (Keyword)cUnitAlternatives_3_0.eContents().get(4);
		
		//Frequency:
		//    freq=Exp 'times' 'per' unit=('second' | 'minute' | 'hour' | 'day' | 'week')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//freq=Exp 'times' 'per' unit=('second' | 'minute' | 'hour' | 'day' | 'week')
		public Group getGroup() { return cGroup; }
		
		//freq=Exp
		public Assignment getFreqAssignment_0() { return cFreqAssignment_0; }
		
		//Exp
		public RuleCall getFreqExpParserRuleCall_0_0() { return cFreqExpParserRuleCall_0_0; }
		
		//'times'
		public Keyword getTimesKeyword_1() { return cTimesKeyword_1; }
		
		//'per'
		public Keyword getPerKeyword_2() { return cPerKeyword_2; }
		
		//unit=('second' | 'minute' | 'hour' | 'day' | 'week')
		public Assignment getUnitAssignment_3() { return cUnitAssignment_3; }
		
		//('second' | 'minute' | 'hour' | 'day' | 'week')
		public Alternatives getUnitAlternatives_3_0() { return cUnitAlternatives_3_0; }
		
		//'second'
		public Keyword getUnitSecondKeyword_3_0_0() { return cUnitSecondKeyword_3_0_0; }
		
		//'minute'
		public Keyword getUnitMinuteKeyword_3_0_1() { return cUnitMinuteKeyword_3_0_1; }
		
		//'hour'
		public Keyword getUnitHourKeyword_3_0_2() { return cUnitHourKeyword_3_0_2; }
		
		//'day'
		public Keyword getUnitDayKeyword_3_0_3() { return cUnitDayKeyword_3_0_3; }
		
		//'week'
		public Keyword getUnitWeekKeyword_3_0_4() { return cUnitWeekKeyword_3_0_4; }
	}
	public class SettingActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.SettingAction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SettingAction:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class GreenhouseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Greenhouse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreenhouseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRowAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRowRowParserRuleCall_2_0 = (RuleCall)cRowAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsGreenhouseElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		
		//Greenhouse:
		//    'greenhouse' name=ID
		//    row+=Row* elements+=GreenhouseElement*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'greenhouse' name=ID
		//row+=Row* elements+=GreenhouseElement*
		public Group getGroup() { return cGroup; }
		
		//'greenhouse'
		public Keyword getGreenhouseKeyword_0() { return cGreenhouseKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//row+=Row*
		public Assignment getRowAssignment_2() { return cRowAssignment_2; }
		
		//Row
		public RuleCall getRowRowParserRuleCall_2_0() { return cRowRowParserRuleCall_2_0; }
		
		//elements+=GreenhouseElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//GreenhouseElement
		public RuleCall getElementsGreenhouseElementParserRuleCall_3_0() { return cElementsGreenhouseElementParserRuleCall_3_0; }
	}
	public class RowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Row");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIncludesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsRowElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		
		//Row:
		//    'row' name=ID 'includes'
		//    elements+=RowElement*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'row' name=ID 'includes'
		//elements+=RowElement*
		public Group getGroup() { return cGroup; }
		
		//'row'
		public Keyword getRowKeyword_0() { return cRowKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'includes'
		public Keyword getIncludesKeyword_2() { return cIncludesKeyword_2; }
		
		//elements+=RowElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//RowElement
		public RuleCall getElementsRowElementParserRuleCall_3_0() { return cElementsRowElementParserRuleCall_3_0; }
	}
	public class GreenhouseElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.GreenhouseElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGreenhouseSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGreenhouseActuatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGreenhouseRuleSetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//GreenhouseElement:
		//     GreenhouseSensor |  GreenhouseActuator |  GreenhouseRuleSet
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//GreenhouseSensor |  GreenhouseActuator |  GreenhouseRuleSet
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GreenhouseSensor
		public RuleCall getGreenhouseSensorParserRuleCall_0() { return cGreenhouseSensorParserRuleCall_0; }
		
		//GreenhouseActuator
		public RuleCall getGreenhouseActuatorParserRuleCall_1() { return cGreenhouseActuatorParserRuleCall_1; }
		
		//GreenhouseRuleSet
		public RuleCall getGreenhouseRuleSetParserRuleCall_2() { return cGreenhouseRuleSetParserRuleCall_2; }
	}
	public class RowElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.RowElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRowSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRowActuatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRowRuleSetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RowElement:
		//     RowSensor |  RowActuator | RowRuleSet
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RowSensor |  RowActuator | RowRuleSet
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RowSensor
		public RuleCall getRowSensorParserRuleCall_0() { return cRowSensorParserRuleCall_0; }
		
		//RowActuator
		public RuleCall getRowActuatorParserRuleCall_1() { return cRowActuatorParserRuleCall_1; }
		
		//RowRuleSet
		public RuleCall getRowRuleSetParserRuleCall_2() { return cRowRuleSetParserRuleCall_2; }
	}
	public class GreenhouseActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.GreenhouseActuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeSettingActuatorCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeSettingActuatorIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeSettingActuatorCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cControllerKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cControllerAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cControllerControllerCrossReference_5_0 = (CrossReference)cControllerAssignment_5.eContents().get(0);
		private final RuleCall cControllerControllerIDTerminalRuleCall_5_0_1 = (RuleCall)cControllerControllerCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWillKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cActionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cActionActionParserRuleCall_6_1_0 = (RuleCall)cActionAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cWillKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cActionAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cActionActionParserRuleCall_7_2_0 = (RuleCall)cActionAssignment_7_2.eContents().get(0);
		private final Keyword cAndKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cHasKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cSafeKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cStateKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cSafeStateAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final CrossReference cSafeStateSettingActionCrossReference_12_0 = (CrossReference)cSafeStateAssignment_12.eContents().get(0);
		private final RuleCall cSafeStateSettingActionIDTerminalRuleCall_12_0_1 = (RuleCall)cSafeStateSettingActionCrossReference_12_0.eContents().get(1);
		
		//GreenhouseActuator:
		//      'global' type=[SettingActuator] name=ID 'on' 'controller' controller=[Controller] ('will' action+=Action)? (',' 'will' action+=Action)*
		//      'and' 'has' 'safe' 'state' safeState=[SettingAction]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'global' type=[SettingActuator] name=ID 'on' 'controller' controller=[Controller] ('will' action+=Action)? (',' 'will' action+=Action)*
		//'and' 'has' 'safe' 'state' safeState=[SettingAction]
		public Group getGroup() { return cGroup; }
		
		//'global'
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }
		
		//type=[SettingActuator]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[SettingActuator]
		public CrossReference getTypeSettingActuatorCrossReference_1_0() { return cTypeSettingActuatorCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeSettingActuatorIDTerminalRuleCall_1_0_1() { return cTypeSettingActuatorIDTerminalRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'on'
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//'controller'
		public Keyword getControllerKeyword_4() { return cControllerKeyword_4; }
		
		//controller=[Controller]
		public Assignment getControllerAssignment_5() { return cControllerAssignment_5; }
		
		//[Controller]
		public CrossReference getControllerControllerCrossReference_5_0() { return cControllerControllerCrossReference_5_0; }
		
		//ID
		public RuleCall getControllerControllerIDTerminalRuleCall_5_0_1() { return cControllerControllerIDTerminalRuleCall_5_0_1; }
		
		//('will' action+=Action)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'will'
		public Keyword getWillKeyword_6_0() { return cWillKeyword_6_0; }
		
		//action+=Action
		public Assignment getActionAssignment_6_1() { return cActionAssignment_6_1; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_6_1_0() { return cActionActionParserRuleCall_6_1_0; }
		
		//(',' 'will' action+=Action)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//'will'
		public Keyword getWillKeyword_7_1() { return cWillKeyword_7_1; }
		
		//action+=Action
		public Assignment getActionAssignment_7_2() { return cActionAssignment_7_2; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_7_2_0() { return cActionActionParserRuleCall_7_2_0; }
		
		//'and'
		public Keyword getAndKeyword_8() { return cAndKeyword_8; }
		
		//'has'
		public Keyword getHasKeyword_9() { return cHasKeyword_9; }
		
		//'safe'
		public Keyword getSafeKeyword_10() { return cSafeKeyword_10; }
		
		//'state'
		public Keyword getStateKeyword_11() { return cStateKeyword_11; }
		
		//safeState=[SettingAction]
		public Assignment getSafeStateAssignment_12() { return cSafeStateAssignment_12; }
		
		//[SettingAction]
		public CrossReference getSafeStateSettingActionCrossReference_12_0() { return cSafeStateSettingActionCrossReference_12_0; }
		
		//ID
		public RuleCall getSafeStateSettingActionIDTerminalRuleCall_12_0_1() { return cSafeStateSettingActionIDTerminalRuleCall_12_0_1; }
	}
	public class RowActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.RowActuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeSettingActuatorCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeSettingActuatorIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeSettingActuatorCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cControllerKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cControllerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cControllerControllerCrossReference_4_0 = (CrossReference)cControllerAssignment_4.eContents().get(0);
		private final RuleCall cControllerControllerIDTerminalRuleCall_4_0_1 = (RuleCall)cControllerControllerCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWillKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cActionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cActionActionParserRuleCall_5_1_0 = (RuleCall)cActionAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cWillKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cActionAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cActionActionParserRuleCall_6_2_0 = (RuleCall)cActionAssignment_6_2.eContents().get(0);
		private final Keyword cAndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cHasKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cSafeKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cStateKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cSafeStateAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cSafeStateSettingActionCrossReference_11_0 = (CrossReference)cSafeStateAssignment_11.eContents().get(0);
		private final RuleCall cSafeStateSettingActionIDTerminalRuleCall_11_0_1 = (RuleCall)cSafeStateSettingActionCrossReference_11_0.eContents().get(1);
		
		//RowActuator:
		//     type=[SettingActuator] name=ID 'on' 'controller' controller=[Controller] ('will' action+=Action)? (',' 'will' action+=Action)*
		//     'and' 'has' 'safe' 'state' safeState=[SettingAction]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[SettingActuator] name=ID 'on' 'controller' controller=[Controller] ('will' action+=Action)? (',' 'will' action+=Action)*
		//'and' 'has' 'safe' 'state' safeState=[SettingAction]
		public Group getGroup() { return cGroup; }
		
		//type=[SettingActuator]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[SettingActuator]
		public CrossReference getTypeSettingActuatorCrossReference_0_0() { return cTypeSettingActuatorCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeSettingActuatorIDTerminalRuleCall_0_0_1() { return cTypeSettingActuatorIDTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//'controller'
		public Keyword getControllerKeyword_3() { return cControllerKeyword_3; }
		
		//controller=[Controller]
		public Assignment getControllerAssignment_4() { return cControllerAssignment_4; }
		
		//[Controller]
		public CrossReference getControllerControllerCrossReference_4_0() { return cControllerControllerCrossReference_4_0; }
		
		//ID
		public RuleCall getControllerControllerIDTerminalRuleCall_4_0_1() { return cControllerControllerIDTerminalRuleCall_4_0_1; }
		
		//('will' action+=Action)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'will'
		public Keyword getWillKeyword_5_0() { return cWillKeyword_5_0; }
		
		//action+=Action
		public Assignment getActionAssignment_5_1() { return cActionAssignment_5_1; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_5_1_0() { return cActionActionParserRuleCall_5_1_0; }
		
		//(',' 'will' action+=Action)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//'will'
		public Keyword getWillKeyword_6_1() { return cWillKeyword_6_1; }
		
		//action+=Action
		public Assignment getActionAssignment_6_2() { return cActionAssignment_6_2; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_6_2_0() { return cActionActionParserRuleCall_6_2_0; }
		
		//'and'
		public Keyword getAndKeyword_7() { return cAndKeyword_7; }
		
		//'has'
		public Keyword getHasKeyword_8() { return cHasKeyword_8; }
		
		//'safe'
		public Keyword getSafeKeyword_9() { return cSafeKeyword_9; }
		
		//'state'
		public Keyword getStateKeyword_10() { return cStateKeyword_10; }
		
		//safeState=[SettingAction]
		public Assignment getSafeStateAssignment_11() { return cSafeStateAssignment_11; }
		
		//[SettingAction]
		public CrossReference getSafeStateSettingActionCrossReference_11_0() { return cSafeStateSettingActionCrossReference_11_0; }
		
		//ID
		public RuleCall getSafeStateSettingActionIDTerminalRuleCall_11_0_1() { return cSafeStateSettingActionIDTerminalRuleCall_11_0_1; }
	}
	public class GreenhouseSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.GreenhouseSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeSettingSensorCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeSettingSensorIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeSettingSensorCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cControllerKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cControllerAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cControllerControllerCrossReference_5_0 = (CrossReference)cControllerAssignment_5.eContents().get(0);
		private final RuleCall cControllerControllerIDTerminalRuleCall_5_0_1 = (RuleCall)cControllerControllerCrossReference_5_0.eContents().get(1);
		private final Keyword cHasKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cVariableAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cVariableVariableParserRuleCall_7_0 = (RuleCall)cVariableAssignment_7.eContents().get(0);
		private final Keyword cAndKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cStatesKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cStatesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cStatesStateParserRuleCall_10_0 = (RuleCall)cStatesAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cStatesAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_11_1_0 = (RuleCall)cStatesAssignment_11_1.eContents().get(0);
		
		//GreenhouseSensor:
		//     'global' type=[SettingSensor] name=ID 'on' 'controller' controller=[Controller] 'has' variable=Variable 'and' 'states'
		//        states+=State(',' states+=State)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'global' type=[SettingSensor] name=ID 'on' 'controller' controller=[Controller] 'has' variable=Variable 'and' 'states'
		//   states+=State(',' states+=State)*
		public Group getGroup() { return cGroup; }
		
		//'global'
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }
		
		//type=[SettingSensor]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[SettingSensor]
		public CrossReference getTypeSettingSensorCrossReference_1_0() { return cTypeSettingSensorCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeSettingSensorIDTerminalRuleCall_1_0_1() { return cTypeSettingSensorIDTerminalRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'on'
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//'controller'
		public Keyword getControllerKeyword_4() { return cControllerKeyword_4; }
		
		//controller=[Controller]
		public Assignment getControllerAssignment_5() { return cControllerAssignment_5; }
		
		//[Controller]
		public CrossReference getControllerControllerCrossReference_5_0() { return cControllerControllerCrossReference_5_0; }
		
		//ID
		public RuleCall getControllerControllerIDTerminalRuleCall_5_0_1() { return cControllerControllerIDTerminalRuleCall_5_0_1; }
		
		//'has'
		public Keyword getHasKeyword_6() { return cHasKeyword_6; }
		
		//variable=Variable
		public Assignment getVariableAssignment_7() { return cVariableAssignment_7; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_7_0() { return cVariableVariableParserRuleCall_7_0; }
		
		//'and'
		public Keyword getAndKeyword_8() { return cAndKeyword_8; }
		
		//'states'
		public Keyword getStatesKeyword_9() { return cStatesKeyword_9; }
		
		//states+=State
		public Assignment getStatesAssignment_10() { return cStatesAssignment_10; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_10_0() { return cStatesStateParserRuleCall_10_0; }
		
		//(',' states+=State)*
		public Group getGroup_11() { return cGroup_11; }
		
		//','
		public Keyword getCommaKeyword_11_0() { return cCommaKeyword_11_0; }
		
		//states+=State
		public Assignment getStatesAssignment_11_1() { return cStatesAssignment_11_1; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_11_1_0() { return cStatesStateParserRuleCall_11_1_0; }
	}
	public class RowSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.RowSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeSettingSensorCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeSettingSensorIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeSettingSensorCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cControllerKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cControllerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cControllerControllerCrossReference_4_0 = (CrossReference)cControllerAssignment_4.eContents().get(0);
		private final RuleCall cControllerControllerIDTerminalRuleCall_4_0_1 = (RuleCall)cControllerControllerCrossReference_4_0.eContents().get(1);
		private final Keyword cHasKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cVariableAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVariableVariableParserRuleCall_6_0 = (RuleCall)cVariableAssignment_6.eContents().get(0);
		private final Keyword cAndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cStatesKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cStatesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStatesStateParserRuleCall_9_0 = (RuleCall)cStatesAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cStatesAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_10_1_0 = (RuleCall)cStatesAssignment_10_1.eContents().get(0);
		
		//RowSensor:
		//    type=[SettingSensor] name=ID 'on' 'controller' controller=[Controller] 'has' variable=Variable 'and' 'states'
		//        states+=State(',' states+=State)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[SettingSensor] name=ID 'on' 'controller' controller=[Controller] 'has' variable=Variable 'and' 'states'
		//    states+=State(',' states+=State)*
		public Group getGroup() { return cGroup; }
		
		//type=[SettingSensor]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[SettingSensor]
		public CrossReference getTypeSettingSensorCrossReference_0_0() { return cTypeSettingSensorCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeSettingSensorIDTerminalRuleCall_0_0_1() { return cTypeSettingSensorIDTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//'controller'
		public Keyword getControllerKeyword_3() { return cControllerKeyword_3; }
		
		//controller=[Controller]
		public Assignment getControllerAssignment_4() { return cControllerAssignment_4; }
		
		//[Controller]
		public CrossReference getControllerControllerCrossReference_4_0() { return cControllerControllerCrossReference_4_0; }
		
		//ID
		public RuleCall getControllerControllerIDTerminalRuleCall_4_0_1() { return cControllerControllerIDTerminalRuleCall_4_0_1; }
		
		//'has'
		public Keyword getHasKeyword_5() { return cHasKeyword_5; }
		
		//variable=Variable
		public Assignment getVariableAssignment_6() { return cVariableAssignment_6; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_6_0() { return cVariableVariableParserRuleCall_6_0; }
		
		//'and'
		public Keyword getAndKeyword_7() { return cAndKeyword_7; }
		
		//'states'
		public Keyword getStatesKeyword_8() { return cStatesKeyword_8; }
		
		//states+=State
		public Assignment getStatesAssignment_9() { return cStatesAssignment_9; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_9_0() { return cStatesStateParserRuleCall_9_0; }
		
		//(',' states+=State)*
		public Group getGroup_10() { return cGroup_10; }
		
		//','
		public Keyword getCommaKeyword_10_0() { return cCommaKeyword_10_0; }
		
		//states+=State
		public Assignment getStatesAssignment_10_1() { return cStatesAssignment_10_1; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_10_1_0() { return cStatesStateParserRuleCall_10_1_0; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVariableVariableCrossReference_2_0 = (CrossReference)cVariableAssignment_2.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cVariableVariableCrossReference_2_0.eContents().get(1);
		private final Assignment cOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cOpAlternatives_3_0 = (Alternatives)cOpAssignment_3.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_3_0_0 = (Keyword)cOpAlternatives_3_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_3_0_1 = (Keyword)cOpAlternatives_3_0.eContents().get(1);
		private final Keyword cOpEqualsSignKeyword_3_0_2 = (Keyword)cOpAlternatives_3_0.eContents().get(2);
		private final Assignment cThresholdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThresholdExpParserRuleCall_4_0 = (RuleCall)cThresholdAssignment_4.eContents().get(0);
		
		//State:
		//    name=ID 'when' variable=[Variable] op = ('<' | '>' | '=') threshold=Exp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'when' variable=[Variable] op = ('<' | '>' | '=') threshold=Exp
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_2_0() { return cVariableVariableCrossReference_2_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_2_0_1() { return cVariableVariableIDTerminalRuleCall_2_0_1; }
		
		//op = ('<' | '>' | '=')
		public Assignment getOpAssignment_3() { return cOpAssignment_3; }
		
		//('<' | '>' | '=')
		public Alternatives getOpAlternatives_3_0() { return cOpAlternatives_3_0; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_3_0_0() { return cOpLessThanSignKeyword_3_0_0; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_3_0_1() { return cOpGreaterThanSignKeyword_3_0_1; }
		
		//'='
		public Keyword getOpEqualsSignKeyword_3_0_2() { return cOpEqualsSignKeyword_3_0_2; }
		
		//threshold=Exp
		public Assignment getThresholdAssignment_4() { return cThresholdAssignment_4; }
		
		//Exp
		public RuleCall getThresholdExpParserRuleCall_4_0() { return cThresholdExpParserRuleCall_4_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variable:
		//    'variable' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'variable' name=ID
		public Group getGroup() { return cGroup; }
		
		//'variable'
		public Keyword getVariableKeyword_0() { return cVariableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cValueSettingActionCrossReference_0_0 = (CrossReference)cValueAssignment_0.eContents().get(0);
		private final RuleCall cValueSettingActionIDTerminalRuleCall_0_0_1 = (RuleCall)cValueSettingActionCrossReference_0_0.eContents().get(1);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cReceivingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTriggerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTriggerTriggerParserRuleCall_3_0 = (RuleCall)cTriggerAssignment_3.eContents().get(0);
		
		//Action:
		//    value=[SettingAction] 'when' 'receiving' trigger=Trigger
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=[SettingAction] 'when' 'receiving' trigger=Trigger
		public Group getGroup() { return cGroup; }
		
		//value=[SettingAction]
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//[SettingAction]
		public CrossReference getValueSettingActionCrossReference_0_0() { return cValueSettingActionCrossReference_0_0; }
		
		//ID
		public RuleCall getValueSettingActionIDTerminalRuleCall_0_0_1() { return cValueSettingActionIDTerminalRuleCall_0_0_1; }
		
		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//'receiving'
		public Keyword getReceivingKeyword_2() { return cReceivingKeyword_2; }
		
		//trigger=Trigger
		public Assignment getTriggerAssignment_3() { return cTriggerAssignment_3; }
		
		//Trigger
		public RuleCall getTriggerTriggerParserRuleCall_3_0() { return cTriggerTriggerParserRuleCall_3_0; }
	}
	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Trigger:
		//    {Trigger} name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Trigger} name=ID
		public Group getGroup() { return cGroup; }
		
		//{Trigger}
		public Action getTriggerAction_0() { return cTriggerAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class RowRuleSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.RowRuleSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActuatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cActuatorRowActuatorCrossReference_2_0 = (CrossReference)cActuatorAssignment_2.eContents().get(0);
		private final RuleCall cActuatorRowActuatorIDTerminalRuleCall_2_0_1 = (RuleCall)cActuatorRowActuatorCrossReference_2_0.eContents().get(1);
		private final Keyword cTriggerKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTriggerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTriggerTriggerCrossReference_4_0 = (CrossReference)cTriggerAssignment_4.eContents().get(0);
		private final RuleCall cTriggerTriggerIDTerminalRuleCall_4_0_1 = (RuleCall)cTriggerTriggerCrossReference_4_0.eContents().get(1);
		private final Keyword cWhenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSensorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSensorRowSensorCrossReference_6_0 = (CrossReference)cSensorAssignment_6.eContents().get(0);
		private final RuleCall cSensorRowSensorIDTerminalRuleCall_6_0_1 = (RuleCall)cSensorRowSensorCrossReference_6_0.eContents().get(1);
		private final Keyword cIsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStateAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cStateStateCrossReference_8_0 = (CrossReference)cStateAssignment_8.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_8_0_1 = (RuleCall)cStateStateCrossReference_8_0.eContents().get(1);
		
		//RowRuleSet:
		//    'rule' 'on' Actuator=[RowActuator] 'trigger' trigger=[Trigger] 'when' sensor=[RowSensor] 'is' state=[State]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' 'on' Actuator=[RowActuator] 'trigger' trigger=[Trigger] 'when' sensor=[RowSensor] 'is' state=[State]
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//'on'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//Actuator=[RowActuator]
		public Assignment getActuatorAssignment_2() { return cActuatorAssignment_2; }
		
		//[RowActuator]
		public CrossReference getActuatorRowActuatorCrossReference_2_0() { return cActuatorRowActuatorCrossReference_2_0; }
		
		//ID
		public RuleCall getActuatorRowActuatorIDTerminalRuleCall_2_0_1() { return cActuatorRowActuatorIDTerminalRuleCall_2_0_1; }
		
		//'trigger'
		public Keyword getTriggerKeyword_3() { return cTriggerKeyword_3; }
		
		//trigger=[Trigger]
		public Assignment getTriggerAssignment_4() { return cTriggerAssignment_4; }
		
		//[Trigger]
		public CrossReference getTriggerTriggerCrossReference_4_0() { return cTriggerTriggerCrossReference_4_0; }
		
		//ID
		public RuleCall getTriggerTriggerIDTerminalRuleCall_4_0_1() { return cTriggerTriggerIDTerminalRuleCall_4_0_1; }
		
		//'when'
		public Keyword getWhenKeyword_5() { return cWhenKeyword_5; }
		
		//sensor=[RowSensor]
		public Assignment getSensorAssignment_6() { return cSensorAssignment_6; }
		
		//[RowSensor]
		public CrossReference getSensorRowSensorCrossReference_6_0() { return cSensorRowSensorCrossReference_6_0; }
		
		//ID
		public RuleCall getSensorRowSensorIDTerminalRuleCall_6_0_1() { return cSensorRowSensorIDTerminalRuleCall_6_0_1; }
		
		//'is'
		public Keyword getIsKeyword_7() { return cIsKeyword_7; }
		
		//state=[State]
		public Assignment getStateAssignment_8() { return cStateAssignment_8; }
		
		//[State]
		public CrossReference getStateStateCrossReference_8_0() { return cStateStateCrossReference_8_0; }
		
		//ID
		public RuleCall getStateStateIDTerminalRuleCall_8_0_1() { return cStateStateIDTerminalRuleCall_8_0_1; }
	}
	public class GreenhouseRuleSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.GreenhouseRuleSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActuatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cActuatorGreenhouseActuatorCrossReference_3_0 = (CrossReference)cActuatorAssignment_3.eContents().get(0);
		private final RuleCall cActuatorGreenhouseActuatorIDTerminalRuleCall_3_0_1 = (RuleCall)cActuatorGreenhouseActuatorCrossReference_3_0.eContents().get(1);
		private final Keyword cTriggerKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTriggerAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTriggerTriggerCrossReference_5_0 = (CrossReference)cTriggerAssignment_5.eContents().get(0);
		private final RuleCall cTriggerTriggerIDTerminalRuleCall_5_0_1 = (RuleCall)cTriggerTriggerCrossReference_5_0.eContents().get(1);
		private final Keyword cWhenKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSensorAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cSensorGreenhouseSensorCrossReference_7_0 = (CrossReference)cSensorAssignment_7.eContents().get(0);
		private final RuleCall cSensorGreenhouseSensorIDTerminalRuleCall_7_0_1 = (RuleCall)cSensorGreenhouseSensorCrossReference_7_0.eContents().get(1);
		private final Keyword cIsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cStateAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cStateStateCrossReference_9_0 = (CrossReference)cStateAssignment_9.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_9_0_1 = (RuleCall)cStateStateCrossReference_9_0.eContents().get(1);
		
		//GreenhouseRuleSet:
		//    'global' 'rule' 'on' actuator=[GreenhouseActuator] 'trigger' trigger=[Trigger] 'when' sensor=[GreenhouseSensor] 'is' state=[State]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'global' 'rule' 'on' actuator=[GreenhouseActuator] 'trigger' trigger=[Trigger] 'when' sensor=[GreenhouseSensor] 'is' state=[State]
		public Group getGroup() { return cGroup; }
		
		//'global'
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }
		
		//'rule'
		public Keyword getRuleKeyword_1() { return cRuleKeyword_1; }
		
		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//actuator=[GreenhouseActuator]
		public Assignment getActuatorAssignment_3() { return cActuatorAssignment_3; }
		
		//[GreenhouseActuator]
		public CrossReference getActuatorGreenhouseActuatorCrossReference_3_0() { return cActuatorGreenhouseActuatorCrossReference_3_0; }
		
		//ID
		public RuleCall getActuatorGreenhouseActuatorIDTerminalRuleCall_3_0_1() { return cActuatorGreenhouseActuatorIDTerminalRuleCall_3_0_1; }
		
		//'trigger'
		public Keyword getTriggerKeyword_4() { return cTriggerKeyword_4; }
		
		//trigger=[Trigger]
		public Assignment getTriggerAssignment_5() { return cTriggerAssignment_5; }
		
		//[Trigger]
		public CrossReference getTriggerTriggerCrossReference_5_0() { return cTriggerTriggerCrossReference_5_0; }
		
		//ID
		public RuleCall getTriggerTriggerIDTerminalRuleCall_5_0_1() { return cTriggerTriggerIDTerminalRuleCall_5_0_1; }
		
		//'when'
		public Keyword getWhenKeyword_6() { return cWhenKeyword_6; }
		
		//sensor=[GreenhouseSensor]
		public Assignment getSensorAssignment_7() { return cSensorAssignment_7; }
		
		//[GreenhouseSensor]
		public CrossReference getSensorGreenhouseSensorCrossReference_7_0() { return cSensorGreenhouseSensorCrossReference_7_0; }
		
		//ID
		public RuleCall getSensorGreenhouseSensorIDTerminalRuleCall_7_0_1() { return cSensorGreenhouseSensorIDTerminalRuleCall_7_0_1; }
		
		//'is'
		public Keyword getIsKeyword_8() { return cIsKeyword_8; }
		
		//state=[State]
		public Assignment getStateAssignment_9() { return cStateAssignment_9; }
		
		//[State]
		public CrossReference getStateStateCrossReference_9_0() { return cStateStateCrossReference_9_0; }
		
		//ID
		public RuleCall getStateStateIDTerminalRuleCall_9_0_1() { return cStateStateIDTerminalRuleCall_9_0_1; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightFactorParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Exp returns Expression:
		//    Factor (( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor (( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//(( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//( {Plus.left=current} '+' | {Minus.left=current}  '-' )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current}  '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=Factor
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Factor
		public RuleCall getRightFactorParserRuleCall_1_1_0() { return cRightFactorParserRuleCall_1_1_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Factor returns Expression:
		//    Primary (({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Primary)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Mult.left=current} '*' | {Div.left=current}  '/'  )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Mult.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Mult.left=current}
		public Action getMultLeftAction_1_0_0_0() { return cMultLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{Div.left=current}  '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_0() { return cRightPrimaryParserRuleCall_1_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMathNumberAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Primary returns Expression:
		//    {MathNumber} value=INT | '(' Exp ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{MathNumber} value=INT | '(' Exp ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{MathNumber} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{MathNumber}
		public Action getMathNumberAction_0_0() { return cMathNumberAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//'(' Exp ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Exp
		public RuleCall getExpParserRuleCall_1_1() { return cExpParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	
	
	private final ModelElements pModel;
	private final HardwareSetupElements pHardwareSetup;
	private final HardwareElements pHardware;
	private final SettingActuatorElements pSettingActuator;
	private final SettingSensorElements pSettingSensor;
	private final ControllerElements pController;
	private final HeartbeatElements pHeartbeat;
	private final ControllerTypeElements pControllerType;
	private final ReducerElements pReducer;
	private final FrequencyElements pFrequency;
	private final SettingActionElements pSettingAction;
	private final GreenhouseElements pGreenhouse;
	private final RowElements pRow;
	private final GreenhouseElementElements pGreenhouseElement;
	private final RowElementElements pRowElement;
	private final GreenhouseActuatorElements pGreenhouseActuator;
	private final RowActuatorElements pRowActuator;
	private final GreenhouseSensorElements pGreenhouseSensor;
	private final RowSensorElements pRowSensor;
	private final StateElements pState;
	private final VariableElements pVariable;
	private final ActionElements pAction;
	private final TriggerElements pTrigger;
	private final RowRuleSetElements pRowRuleSet;
	private final GreenhouseRuleSetElements pGreenhouseRuleSet;
	private final ExpElements pExp;
	private final FactorElements pFactor;
	private final PrimaryElements pPrimary;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GreenhouseGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pHardwareSetup = new HardwareSetupElements();
		this.pHardware = new HardwareElements();
		this.pSettingActuator = new SettingActuatorElements();
		this.pSettingSensor = new SettingSensorElements();
		this.pController = new ControllerElements();
		this.pHeartbeat = new HeartbeatElements();
		this.pControllerType = new ControllerTypeElements();
		this.pReducer = new ReducerElements();
		this.pFrequency = new FrequencyElements();
		this.pSettingAction = new SettingActionElements();
		this.pGreenhouse = new GreenhouseElements();
		this.pRow = new RowElements();
		this.pGreenhouseElement = new GreenhouseElementElements();
		this.pRowElement = new RowElementElements();
		this.pGreenhouseActuator = new GreenhouseActuatorElements();
		this.pRowActuator = new RowActuatorElements();
		this.pGreenhouseSensor = new GreenhouseSensorElements();
		this.pRowSensor = new RowSensorElements();
		this.pState = new StateElements();
		this.pVariable = new VariableElements();
		this.pAction = new ActionElements();
		this.pTrigger = new TriggerElements();
		this.pRowRuleSet = new RowRuleSetElements();
		this.pGreenhouseRuleSet = new GreenhouseRuleSetElements();
		this.pExp = new ExpElements();
		this.pFactor = new FactorElements();
		this.pPrimary = new PrimaryElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dsl.Greenhouse".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    "system" name=ID
	//    hardwareSetup+=HardwareSetup?
	//    greenhouses+=Greenhouse*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//HardwareSetup:
	//    {HardwareSetup} 'hardware' 'types'
	//    hardware+=Hardware*
	//    'micro-controllers'
	//    controllers+=Controller+
	//;
	public HardwareSetupElements getHardwareSetupAccess() {
		return pHardwareSetup;
	}
	
	public ParserRule getHardwareSetupRule() {
		return getHardwareSetupAccess().getRule();
	}
	
	//Hardware:
	//    SettingActuator | SettingSensor
	//;
	public HardwareElements getHardwareAccess() {
		return pHardware;
	}
	
	public ParserRule getHardwareRule() {
		return getHardwareAccess().getRule();
	}
	
	//SettingActuator:
	//    'actuator' name=ID 'has' 'action' settingAction+=SettingAction (',' settingAction+=SettingAction)*
	//;
	public SettingActuatorElements getSettingActuatorAccess() {
		return pSettingActuator;
	}
	
	public ParserRule getSettingActuatorRule() {
		return getSettingActuatorAccess().getRule();
	}
	
	//SettingSensor:
	//    'sensor' name=ID 'publishes' reducer=Reducer? frequency=Frequency
	//;
	public SettingSensorElements getSettingSensorAccess() {
		return pSettingSensor;
	}
	
	public ParserRule getSettingSensorRule() {
		return getSettingSensorAccess().getRule();
	}
	
	//Controller:
	//    'controller' name=ID 'of' 'type' type=ControllerType 'and' heartBeat=Heartbeat
	//;
	public ControllerElements getControllerAccess() {
		return pController;
	}
	
	public ParserRule getControllerRule() {
		return getControllerAccess().getRule();
	}
	
	//Heartbeat:
	//    'sends' 'heartbeat' freq=Frequency
	//;
	public HeartbeatElements getHeartbeatAccess() {
		return pHeartbeat;
	}
	
	public ParserRule getHeartbeatRule() {
		return getHeartbeatAccess().getRule();
	}
	
	//ControllerType:
	//    name=('ESP32' | 'ESP8266')
	//;
	public ControllerTypeElements getControllerTypeAccess() {
		return pControllerType;
	}
	
	public ParserRule getControllerTypeRule() {
		return getControllerTypeAccess().getRule();
	}
	
	//Reducer:
	//    name=('average' | 'median')
	//;
	public ReducerElements getReducerAccess() {
		return pReducer;
	}
	
	public ParserRule getReducerRule() {
		return getReducerAccess().getRule();
	}
	
	//Frequency:
	//    freq=Exp 'times' 'per' unit=('second' | 'minute' | 'hour' | 'day' | 'week')
	//;
	public FrequencyElements getFrequencyAccess() {
		return pFrequency;
	}
	
	public ParserRule getFrequencyRule() {
		return getFrequencyAccess().getRule();
	}
	
	//SettingAction:
	//    name=ID
	//;
	public SettingActionElements getSettingActionAccess() {
		return pSettingAction;
	}
	
	public ParserRule getSettingActionRule() {
		return getSettingActionAccess().getRule();
	}
	
	//Greenhouse:
	//    'greenhouse' name=ID
	//    row+=Row* elements+=GreenhouseElement*
	//;
	public GreenhouseElements getGreenhouseAccess() {
		return pGreenhouse;
	}
	
	public ParserRule getGreenhouseRule() {
		return getGreenhouseAccess().getRule();
	}
	
	//Row:
	//    'row' name=ID 'includes'
	//    elements+=RowElement*
	//;
	public RowElements getRowAccess() {
		return pRow;
	}
	
	public ParserRule getRowRule() {
		return getRowAccess().getRule();
	}
	
	//GreenhouseElement:
	//     GreenhouseSensor |  GreenhouseActuator |  GreenhouseRuleSet
	//;
	public GreenhouseElementElements getGreenhouseElementAccess() {
		return pGreenhouseElement;
	}
	
	public ParserRule getGreenhouseElementRule() {
		return getGreenhouseElementAccess().getRule();
	}
	
	//RowElement:
	//     RowSensor |  RowActuator | RowRuleSet
	//;
	public RowElementElements getRowElementAccess() {
		return pRowElement;
	}
	
	public ParserRule getRowElementRule() {
		return getRowElementAccess().getRule();
	}
	
	//GreenhouseActuator:
	//      'global' type=[SettingActuator] name=ID 'on' 'controller' controller=[Controller] ('will' action+=Action)? (',' 'will' action+=Action)*
	//      'and' 'has' 'safe' 'state' safeState=[SettingAction]
	//;
	public GreenhouseActuatorElements getGreenhouseActuatorAccess() {
		return pGreenhouseActuator;
	}
	
	public ParserRule getGreenhouseActuatorRule() {
		return getGreenhouseActuatorAccess().getRule();
	}
	
	//RowActuator:
	//     type=[SettingActuator] name=ID 'on' 'controller' controller=[Controller] ('will' action+=Action)? (',' 'will' action+=Action)*
	//     'and' 'has' 'safe' 'state' safeState=[SettingAction]
	//;
	public RowActuatorElements getRowActuatorAccess() {
		return pRowActuator;
	}
	
	public ParserRule getRowActuatorRule() {
		return getRowActuatorAccess().getRule();
	}
	
	//GreenhouseSensor:
	//     'global' type=[SettingSensor] name=ID 'on' 'controller' controller=[Controller] 'has' variable=Variable 'and' 'states'
	//        states+=State(',' states+=State)*
	//;
	public GreenhouseSensorElements getGreenhouseSensorAccess() {
		return pGreenhouseSensor;
	}
	
	public ParserRule getGreenhouseSensorRule() {
		return getGreenhouseSensorAccess().getRule();
	}
	
	//RowSensor:
	//    type=[SettingSensor] name=ID 'on' 'controller' controller=[Controller] 'has' variable=Variable 'and' 'states'
	//        states+=State(',' states+=State)*
	//;
	public RowSensorElements getRowSensorAccess() {
		return pRowSensor;
	}
	
	public ParserRule getRowSensorRule() {
		return getRowSensorAccess().getRule();
	}
	
	//State:
	//    name=ID 'when' variable=[Variable] op = ('<' | '>' | '=') threshold=Exp
	//;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Variable:
	//    'variable' name=ID
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Action:
	//    value=[SettingAction] 'when' 'receiving' trigger=Trigger
	//;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Trigger:
	//    {Trigger} name=ID
	//;
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}
	
	//RowRuleSet:
	//    'rule' 'on' Actuator=[RowActuator] 'trigger' trigger=[Trigger] 'when' sensor=[RowSensor] 'is' state=[State]
	//;
	public RowRuleSetElements getRowRuleSetAccess() {
		return pRowRuleSet;
	}
	
	public ParserRule getRowRuleSetRule() {
		return getRowRuleSetAccess().getRule();
	}
	
	//GreenhouseRuleSet:
	//    'global' 'rule' 'on' actuator=[GreenhouseActuator] 'trigger' trigger=[Trigger] 'when' sensor=[GreenhouseSensor] 'is' state=[State]
	//;
	public GreenhouseRuleSetElements getGreenhouseRuleSetAccess() {
		return pGreenhouseRuleSet;
	}
	
	public ParserRule getGreenhouseRuleSetRule() {
		return getGreenhouseRuleSetAccess().getRule();
	}
	
	//Exp returns Expression:
	//    Factor (( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
	//;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//Factor returns Expression:
	//    Primary (({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Primary)*
	//;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//Primary returns Expression:
	//    {MathNumber} value=INT | '(' Exp ')'
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
