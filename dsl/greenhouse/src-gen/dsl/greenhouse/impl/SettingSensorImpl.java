/**
 * generated by Xtext 2.25.0
 */
package dsl.greenhouse.impl;

import dsl.greenhouse.Frequency;
import dsl.greenhouse.GreenhousePackage;
import dsl.greenhouse.Reducer;
import dsl.greenhouse.SettingSensor;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Setting Sensor</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dsl.greenhouse.impl.SettingSensorImpl#getReducer <em>Reducer</em>}</li>
 *   <li>{@link dsl.greenhouse.impl.SettingSensorImpl#getFrequency <em>Frequency</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SettingSensorImpl extends HardwareImpl implements SettingSensor
{
  /**
   * The cached value of the '{@link #getReducer() <em>Reducer</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReducer()
   * @generated
   * @ordered
   */
  protected Reducer reducer;

  /**
   * The cached value of the '{@link #getFrequency() <em>Frequency</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFrequency()
   * @generated
   * @ordered
   */
  protected Frequency frequency;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SettingSensorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GreenhousePackage.Literals.SETTING_SENSOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Reducer getReducer()
  {
    return reducer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetReducer(Reducer newReducer, NotificationChain msgs)
  {
    Reducer oldReducer = reducer;
    reducer = newReducer;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GreenhousePackage.SETTING_SENSOR__REDUCER, oldReducer, newReducer);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReducer(Reducer newReducer)
  {
    if (newReducer != reducer)
    {
      NotificationChain msgs = null;
      if (reducer != null)
        msgs = ((InternalEObject)reducer).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GreenhousePackage.SETTING_SENSOR__REDUCER, null, msgs);
      if (newReducer != null)
        msgs = ((InternalEObject)newReducer).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GreenhousePackage.SETTING_SENSOR__REDUCER, null, msgs);
      msgs = basicSetReducer(newReducer, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GreenhousePackage.SETTING_SENSOR__REDUCER, newReducer, newReducer));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Frequency getFrequency()
  {
    return frequency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFrequency(Frequency newFrequency, NotificationChain msgs)
  {
    Frequency oldFrequency = frequency;
    frequency = newFrequency;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GreenhousePackage.SETTING_SENSOR__FREQUENCY, oldFrequency, newFrequency);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFrequency(Frequency newFrequency)
  {
    if (newFrequency != frequency)
    {
      NotificationChain msgs = null;
      if (frequency != null)
        msgs = ((InternalEObject)frequency).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GreenhousePackage.SETTING_SENSOR__FREQUENCY, null, msgs);
      if (newFrequency != null)
        msgs = ((InternalEObject)newFrequency).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GreenhousePackage.SETTING_SENSOR__FREQUENCY, null, msgs);
      msgs = basicSetFrequency(newFrequency, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GreenhousePackage.SETTING_SENSOR__FREQUENCY, newFrequency, newFrequency));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GreenhousePackage.SETTING_SENSOR__REDUCER:
        return basicSetReducer(null, msgs);
      case GreenhousePackage.SETTING_SENSOR__FREQUENCY:
        return basicSetFrequency(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GreenhousePackage.SETTING_SENSOR__REDUCER:
        return getReducer();
      case GreenhousePackage.SETTING_SENSOR__FREQUENCY:
        return getFrequency();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GreenhousePackage.SETTING_SENSOR__REDUCER:
        setReducer((Reducer)newValue);
        return;
      case GreenhousePackage.SETTING_SENSOR__FREQUENCY:
        setFrequency((Frequency)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GreenhousePackage.SETTING_SENSOR__REDUCER:
        setReducer((Reducer)null);
        return;
      case GreenhousePackage.SETTING_SENSOR__FREQUENCY:
        setFrequency((Frequency)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GreenhousePackage.SETTING_SENSOR__REDUCER:
        return reducer != null;
      case GreenhousePackage.SETTING_SENSOR__FREQUENCY:
        return frequency != null;
    }
    return super.eIsSet(featureID);
  }

} //SettingSensorImpl
