/**
 * generated by Xtext 2.25.0
 */
package dsl.greenhouse.impl;

import dsl.greenhouse.Frequency;
import dsl.greenhouse.GreenhousePackage;
import dsl.greenhouse.Heartbeat;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Heartbeat</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dsl.greenhouse.impl.HeartbeatImpl#getFreq <em>Freq</em>}</li>
 * </ul>
 *
 * @generated
 */
public class HeartbeatImpl extends MinimalEObjectImpl.Container implements Heartbeat
{
  /**
   * The cached value of the '{@link #getFreq() <em>Freq</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFreq()
   * @generated
   * @ordered
   */
  protected Frequency freq;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HeartbeatImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GreenhousePackage.Literals.HEARTBEAT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Frequency getFreq()
  {
    return freq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFreq(Frequency newFreq, NotificationChain msgs)
  {
    Frequency oldFreq = freq;
    freq = newFreq;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GreenhousePackage.HEARTBEAT__FREQ, oldFreq, newFreq);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFreq(Frequency newFreq)
  {
    if (newFreq != freq)
    {
      NotificationChain msgs = null;
      if (freq != null)
        msgs = ((InternalEObject)freq).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GreenhousePackage.HEARTBEAT__FREQ, null, msgs);
      if (newFreq != null)
        msgs = ((InternalEObject)newFreq).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GreenhousePackage.HEARTBEAT__FREQ, null, msgs);
      msgs = basicSetFreq(newFreq, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GreenhousePackage.HEARTBEAT__FREQ, newFreq, newFreq));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GreenhousePackage.HEARTBEAT__FREQ:
        return basicSetFreq(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GreenhousePackage.HEARTBEAT__FREQ:
        return getFreq();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GreenhousePackage.HEARTBEAT__FREQ:
        setFreq((Frequency)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GreenhousePackage.HEARTBEAT__FREQ:
        setFreq((Frequency)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GreenhousePackage.HEARTBEAT__FREQ:
        return freq != null;
    }
    return super.eIsSet(featureID);
  }

} //HeartbeatImpl
