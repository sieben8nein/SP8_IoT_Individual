/**
 * generated by Xtext 2.25.0
 */
package dsl.greenhouse.impl;

import dsl.greenhouse.GreenhousePackage;
import dsl.greenhouse.SettingAction;
import dsl.greenhouse.SettingActuator;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Setting Actuator</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dsl.greenhouse.impl.SettingActuatorImpl#getSettingAction <em>Setting Action</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SettingActuatorImpl extends HardwareImpl implements SettingActuator
{
  /**
   * The cached value of the '{@link #getSettingAction() <em>Setting Action</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSettingAction()
   * @generated
   * @ordered
   */
  protected EList<SettingAction> settingAction;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SettingActuatorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GreenhousePackage.Literals.SETTING_ACTUATOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SettingAction> getSettingAction()
  {
    if (settingAction == null)
    {
      settingAction = new EObjectContainmentEList<SettingAction>(SettingAction.class, this, GreenhousePackage.SETTING_ACTUATOR__SETTING_ACTION);
    }
    return settingAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GreenhousePackage.SETTING_ACTUATOR__SETTING_ACTION:
        return ((InternalEList<?>)getSettingAction()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GreenhousePackage.SETTING_ACTUATOR__SETTING_ACTION:
        return getSettingAction();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GreenhousePackage.SETTING_ACTUATOR__SETTING_ACTION:
        getSettingAction().clear();
        getSettingAction().addAll((Collection<? extends SettingAction>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GreenhousePackage.SETTING_ACTUATOR__SETTING_ACTION:
        getSettingAction().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GreenhousePackage.SETTING_ACTUATOR__SETTING_ACTION:
        return settingAction != null && !settingAction.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //SettingActuatorImpl
