/**
 * generated by Xtext 2.25.0
 */
package dsl.validation;

import com.google.common.base.Objects;
import dsl.greenhouse.Action;
import dsl.greenhouse.Greenhouse;
import dsl.greenhouse.GreenhouseActuator;
import dsl.greenhouse.GreenhouseElement;
import dsl.greenhouse.GreenhousePackage;
import dsl.greenhouse.GreenhouseRuleSet;
import dsl.greenhouse.GreenhouseSensor;
import dsl.greenhouse.Hardware;
import dsl.greenhouse.HardwareSetup;
import dsl.greenhouse.Row;
import dsl.greenhouse.RowActuator;
import dsl.greenhouse.RowElement;
import dsl.greenhouse.RowSensor;
import dsl.greenhouse.SettingActuator;
import dsl.greenhouse.SettingSensor;
import dsl.greenhouse.Trigger;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class GreenhouseValidator extends AbstractGreenhouseValidator {
  public static final String VAR_UNIQUE = "var_unique";
  
  @Check
  public void uniqueGlobalSettingSensorDefinition(final SettingSensor sensor) {
    EObject _eContainer = sensor.eContainer();
    final Function1<Hardware, Boolean> _function = (Hardware it) -> {
      String _name = it.getName();
      String _name_1 = sensor.getName();
      return Boolean.valueOf(Objects.equal(_name, _name_1));
    };
    int _size = IterableExtensions.size(IterableExtensions.<Hardware>filter(((HardwareSetup) _eContainer).getHardware(), _function));
    boolean _greaterThan = (_size > 1);
    if (_greaterThan) {
      this.error("Duplicate global hardware", GreenhousePackage.eINSTANCE.getHardware_Name(), GreenhouseValidator.VAR_UNIQUE);
    }
  }
  
  @Check
  public void uniqueGlobalSettingActuatorDefinition(final SettingActuator actuator) {
    EObject _eContainer = actuator.eContainer();
    final Function1<Hardware, Boolean> _function = (Hardware it) -> {
      String _name = it.getName();
      String _name_1 = actuator.getName();
      return Boolean.valueOf(Objects.equal(_name, _name_1));
    };
    int _size = IterableExtensions.size(IterableExtensions.<Hardware>filter(((HardwareSetup) _eContainer).getHardware(), _function));
    boolean _greaterThan = (_size > 1);
    if (_greaterThan) {
      this.error("Duplicate global hardware", GreenhousePackage.eINSTANCE.getHardware_Name(), GreenhouseValidator.VAR_UNIQUE);
    }
  }
  
  @Check
  public void uniqueLocalSensorDefinition(final RowSensor sensor) {
    EObject _eContainer = sensor.eContainer();
    final Function1<RowElement, Boolean> _function = (RowElement it) -> {
      boolean _switchResult = false;
      boolean _matched = false;
      if (it instanceof RowSensor) {
        _matched=true;
        String _lowerCase = ((RowSensor)it).getName().toLowerCase();
        String _lowerCase_1 = sensor.getName().toLowerCase();
        _switchResult = Objects.equal(_lowerCase, _lowerCase_1);
      }
      if (!_matched) {
        if (it instanceof RowActuator) {
          _matched=true;
          String _lowerCase = ((RowActuator)it).getName().toLowerCase();
          String _lowerCase_1 = sensor.getName().toLowerCase();
          _switchResult = Objects.equal(_lowerCase, _lowerCase_1);
        }
      }
      if (!_matched) {
        _switchResult = false;
      }
      return Boolean.valueOf(_switchResult);
    };
    int _size = IterableExtensions.size(IterableExtensions.<RowElement>filter(((Row) _eContainer).getElements(), _function));
    boolean _greaterThan = (_size > 1);
    if (_greaterThan) {
      this.error("Duplicate local variable", GreenhousePackage.eINSTANCE.getRowSensor_Name(), GreenhouseValidator.VAR_UNIQUE);
    }
  }
  
  @Check
  public void uniqueGlobalSensorDefinition(final GreenhouseSensor sensor) {
    EObject _eContainer = sensor.eContainer();
    final Function1<GreenhouseElement, Boolean> _function = (GreenhouseElement it) -> {
      boolean _switchResult = false;
      boolean _matched = false;
      if (it instanceof GreenhouseActuator) {
        _matched=true;
        String _lowerCase = ((GreenhouseActuator)it).getName().toLowerCase();
        String _lowerCase_1 = sensor.getName().toLowerCase();
        _switchResult = Objects.equal(_lowerCase, _lowerCase_1);
      }
      if (!_matched) {
        if (it instanceof GreenhouseSensor) {
          _matched=true;
          String _lowerCase = ((GreenhouseSensor)it).getName().toLowerCase();
          String _lowerCase_1 = sensor.getName().toLowerCase();
          _switchResult = Objects.equal(_lowerCase, _lowerCase_1);
        }
      }
      if (!_matched) {
        _switchResult = false;
      }
      return Boolean.valueOf(_switchResult);
    };
    int _size = IterableExtensions.size(IterableExtensions.<GreenhouseElement>filter(((Greenhouse) _eContainer).getElements(), _function));
    boolean _greaterThan = (_size > 1);
    if (_greaterThan) {
      this.error("Duplicate local variable", GreenhousePackage.eINSTANCE.getRowSensor_Name(), GreenhouseValidator.VAR_UNIQUE);
    }
  }
  
  @Check
  public void uniqueLocalActuatorDefinition(final RowActuator actuator) {
    EObject _eContainer = actuator.eContainer();
    final Function1<RowElement, Boolean> _function = (RowElement it) -> {
      boolean _switchResult = false;
      boolean _matched = false;
      if (it instanceof RowSensor) {
        _matched=true;
        String _lowerCase = ((RowSensor)it).getName().toLowerCase();
        String _lowerCase_1 = actuator.getName().toLowerCase();
        _switchResult = Objects.equal(_lowerCase, _lowerCase_1);
      }
      if (!_matched) {
        if (it instanceof RowActuator) {
          _matched=true;
          String _lowerCase = ((RowActuator)it).getName().toLowerCase();
          String _lowerCase_1 = actuator.getName().toLowerCase();
          _switchResult = Objects.equal(_lowerCase, _lowerCase_1);
        }
      }
      if (!_matched) {
        _switchResult = false;
      }
      return Boolean.valueOf(_switchResult);
    };
    int _size = IterableExtensions.size(IterableExtensions.<RowElement>filter(((Row) _eContainer).getElements(), _function));
    boolean _greaterThan = (_size > 1);
    if (_greaterThan) {
      this.error("Duplicate local variable", GreenhousePackage.eINSTANCE.getRowActuator_Name(), GreenhouseValidator.VAR_UNIQUE);
    }
  }
  
  @Check
  public void uniqueLocalStateDefinition(final dsl.greenhouse.State state) {
    EObject _eContainer = state.eContainer();
    boolean _matched = false;
    if (_eContainer instanceof RowSensor) {
      _matched=true;
      EObject _eContainer_1 = state.eContainer();
      final Function1<dsl.greenhouse.State, Boolean> _function = (dsl.greenhouse.State it) -> {
        String _lowerCase = it.getName().toLowerCase();
        String _lowerCase_1 = state.getName().toLowerCase();
        return Boolean.valueOf(Objects.equal(_lowerCase, _lowerCase_1));
      };
      int _size = IterableExtensions.size(IterableExtensions.<dsl.greenhouse.State>filter(((RowSensor) _eContainer_1).getStates(), _function));
      boolean _greaterThan = (_size > 1);
      if (_greaterThan) {
        this.error("Duplicate local state", GreenhousePackage.eINSTANCE.getState_Name(), GreenhouseValidator.VAR_UNIQUE);
      }
    }
    if (!_matched) {
      if (_eContainer instanceof GreenhouseSensor) {
        _matched=true;
        EObject _eContainer_1 = state.eContainer();
        final Function1<dsl.greenhouse.State, Boolean> _function = (dsl.greenhouse.State it) -> {
          String _name = it.getName();
          String _name_1 = state.getName();
          return Boolean.valueOf(Objects.equal(_name, _name_1));
        };
        int _size = IterableExtensions.size(IterableExtensions.<dsl.greenhouse.State>filter(((GreenhouseSensor) _eContainer_1).getStates(), _function));
        boolean _greaterThan = (_size > 1);
        if (_greaterThan) {
          this.error("Duplicate local state", GreenhousePackage.eINSTANCE.getState_Name(), GreenhouseValidator.VAR_UNIQUE);
        }
      }
    }
  }
  
  @Check
  public void uniqueTriggerDefinition(final Trigger trigger) {
    final EObject actuator = trigger.eContainer().eContainer();
    final List<Trigger> triggers = EcoreUtil2.<Trigger>getAllContentsOfType(actuator, Trigger.class);
    final Function1<Trigger, Boolean> _function = (Trigger it) -> {
      String _lowerCase = it.getName().toLowerCase();
      String _lowerCase_1 = trigger.getName().toLowerCase();
      return Boolean.valueOf(Objects.equal(_lowerCase, _lowerCase_1));
    };
    int _size = IterableExtensions.size(IterableExtensions.<Trigger>filter(triggers, _function));
    boolean _greaterThan = (_size > 1);
    if (_greaterThan) {
      this.error("Duplicate local trigger", GreenhousePackage.eINSTANCE.getTrigger_Name(), GreenhouseValidator.VAR_UNIQUE);
    }
  }
  
  @Check
  public void triggerScoping(final GreenhouseRuleSet rule) {
    final Function1<Action, Boolean> _function = (Action it) -> {
      String _name = it.getTrigger().getName();
      String _name_1 = rule.getTrigger().getName();
      return Boolean.valueOf(Objects.equal(_name, _name_1));
    };
    int _size = IterableExtensions.size(IterableExtensions.<Action>filter(rule.getActuator().getAction(), _function));
    boolean _lessThan = (_size < 1);
    if (_lessThan) {
      String _name = rule.getActuator().getName();
      String _plus = ("You need to choose a trigger from the actuator: " + _name);
      this.error(_plus, GreenhousePackage.eINSTANCE.getGreenhouseRuleSet_Trigger(), GreenhouseValidator.VAR_UNIQUE);
    }
  }
  
  @Check
  public void stateScoping(final GreenhouseRuleSet rule) {
    final Function1<dsl.greenhouse.State, Boolean> _function = (dsl.greenhouse.State it) -> {
      String _name = it.getName();
      String _name_1 = rule.getState().getName();
      return Boolean.valueOf(Objects.equal(_name, _name_1));
    };
    int _size = IterableExtensions.size(IterableExtensions.<dsl.greenhouse.State>filter(rule.getSensor().getStates(), _function));
    boolean _lessThan = (_size < 1);
    if (_lessThan) {
      String _name = rule.getSensor().getName();
      String _plus = ("You need to choose a state from the sensor: " + _name);
      this.error(_plus, GreenhousePackage.eINSTANCE.getGreenhouseRuleSet_Trigger(), "ReferenceError");
    }
  }
}
