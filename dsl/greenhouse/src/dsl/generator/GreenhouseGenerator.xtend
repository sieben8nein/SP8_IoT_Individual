/*
 * generated by Xtext 2.25.0
 */
package dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dsl.greenhouse.Model
import dsl.greenhouse.Controller
import dsl.greenhouse.HardwareSetup

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GreenhouseGenerator extends AbstractGenerator {
	
	ControllerGenerator controllerGenerator = new ControllerGenerator();
	PeripheralGenerator peripheralGenerator = new PeripheralGenerator();
	VerificationGenerator verificationGenerator = new VerificationGenerator();
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.allContents.filter(Model).next
		for (HardwareSetup hardware : model.hardwareSetup) {
          for(Controller controller : hardware.controllers){
              fsa.generateFile('peripheral/'+controller.name+'/' + controller.name + ".ino", peripheralGenerator.compilePeripheral(model, controller))
          }
        }
		fsa.generateFile('controller/' + model.name + ".py", controllerGenerator.compileController(model))
		fsa.generateFile('verification/' + model.name + ".xta", verificationGenerator.compileVerification(model))
		
	}
}



