#include <Statistical.h>
#include <PubSubClient.h>
#include <analogWrite.h>
#include <WiFi.h>
const int arrSize = 10;
#define moistSensorTopic "greenify/tomatoes/moistSensor"
float moistSensorValueArray[arrSize];
int moistSensorCounter = 0;

// timers for row sensors
long int moistSensorTimer = millis();
// timers for greenhouse sensors
#define LocalControllerTopic "LocalController"
long int LocalControllerTimer = millis();

//wifi
const char* ssid = "Pixi";
const char* password = "bende62c";
void initWiFi() {
  WiFi.enableSTA( true );
  WiFi.mode(WIFI_STA);
  delay(10);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(100);
  }
  Serial.println(WiFi.localIP());
}
// MQTT setup
const char* mqtt_server =  "192.168.130.203";
WiFiClient espClient;
PubSubClient client(espClient);
int mqttCounter = 0;
void publish(const char* topic, const char* content) {
  client.publish(topic, content);
}

void subscribe(const char* topic) {
  client.subscribe(topic);
}
void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    const char* clientId = "LocalController" + char(mqttCounter);
    if (client.connect(clientId)) {
      Serial.println("connected");
      // Subscribe
      mqttCounter++;
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(1000);
      mqttCounter++;
    }
  }
}

void callback(char* topic, byte* message, unsigned int length) {
  String msg = "";
  for (int i = 0; i < length; i++) {
    msg = msg + (char)message[i];
  }
}

void setupmoistSensor() {
}

float getmoistSensorValue() {
  return analogRead(36);
}

void setup() {
  Serial.begin(115200);
  while (!Serial) {
    delay(100);
  }
  delay(10);
  initWiFi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

  setupmoistSensor();
  pinMode(4, OUTPUT);
  digitalWrite(4, HIGH);
}

char* convertValueToCharArray(float value) {
  String strValue = String(value);
  int str_len = strValue.length() + 1;
  char char_array[str_len];
  strValue.toCharArray(char_array, str_len);
  return char_array;
}

void sendHeartbeat() {
  Serial.println("sending heartbeat");
  String strValue = "ping! local_time: " + String(millis());
  int str_len = strValue.length() + 1;
  char char_array[str_len];
  strValue.toCharArray(char_array, str_len);
  client.publish("local_controller", char_array);
}

void loop() {
  long start = millis();
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  int heartbeatdelay = 5000000;
  int sensordelay = 12000000;
  Serial.println("Sleeping " + String(round(sensordelay / heartbeatdelay)) + " times " + String(heartbeatdelay) + " microseconds");
  //if sensor delay is bigger than heartbeat delay
  for (int i = 0; i < round(sensordelay / heartbeatdelay); i++) {
    Serial.println("Going to sleep for " + String(heartbeatdelay - ((millis() - start)*1000)) + " microseconds, minus 2s delay caused by wifi connection");
    esp_sleep_enable_timer_wakeup((heartbeatdelay - ((millis() - start)*1000))-3000000);
    WiFi.disconnect(true);
    delay(100);
    Serial.println("before sleep: current running time: " + String(millis()));
    esp_light_sleep_start();
    Serial.println("after sleep: current running time: " + String(millis()));
    Serial.println("awake again");
    initWiFi();
    delay(100);
    if (!client.connected()) {
      reconnect();
    }
    sendHeartbeat();
    start = millis();
    Serial.println("published heartbeat");
    delay(100);
  }
  Serial.println("waiting: " + String((sensordelay % heartbeatdelay) / 1000) + " before sending sensor value");

  delay((sensordelay % heartbeatdelay) / 1000);
  String strValue = String(getmoistSensorValue());
  int str_len = strValue.length() + 1;
  char char_array[str_len];
  strValue.toCharArray(char_array, str_len);
  client.publish("greenify/tomatoes/moistureSensor", char_array);
  Serial.println("published sensor value " + strValue + ", now waiting " + String((heartbeatdelay - ((millis() - start)*1000))/1000) + " milliseconds before sending heartbeat");
  delay((heartbeatdelay - ((millis() - start)*1000))/1000);
  sendHeartbeat();
  delay(100);
}